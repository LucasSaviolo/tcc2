import React, { useState, useEffect }  const { control, handleSubmit, reset, formState: { errors }, watch } = useForm<CriancaFormData>({
    resolver: yupResolver(schema),
    defaultValues: initialData || {
      nome: '',
      data_nascimento: '',
      cpf: '',
      responsavel_id: 0,
      criterios_prioridade_ids: [],
      primeira_opcao_creche_id: undefined,
      segunda_opcao_creche_id: undefined,
      terceira_opcao_creche_id: undefined,
    },
  });;
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useQuery } from '@tanstack/react-query';
import { apiService } from '../../services/api';
import { useCriancaMutations } from '../../hooks/useMutations';
import Button from '../ui/Button';
import Input from '../ui/Input';
import Select from '../ui/Select';
import FileUpload from '../ui/FileUpload';
import type { CriancaFormData, Responsavel, Criterio, Creche } from '../../types';

interface CriancaFormProps {
  initialData?: CriancaFormData;
  onSuccess?: () => void;
  onCancel: () => void;
}

const schema = yup.object({
  nome: yup.string().required('Nome é obrigatório'),
  data_nascimento: yup.string().required('Data de nascimento é obrigatória'),
  cpf: yup.string().optional(),
  responsavel_id: yup.number().required('Responsável é obrigatório'),
  criterios_prioridade_ids: yup.array().of(yup.number()).optional(),
  primeira_opcao_creche_id: yup.number().required('Primeira opção de creche é obrigatória'),
  segunda_opcao_creche_id: yup.number().optional(),
  terceira_opcao_creche_id: yup.number().optional(),
});

const CriancaForm: React.FC<CriancaFormProps> = ({ initialData, onSuccess, onCancel }) => {
  const [showResponsavelForm, setShowResponsavelForm] = useState(false);
  const [documentosMatricula, setDocumentosMatricula] = useState<File[]>([]);
  const [documentosCriterios, setDocumentosCriterios] = useState<{ [key: number]: File }>({});
  const [criteriosSelecionados, setCriteriosSelecionados] = useState<number[]>([]);
  const { createCrianca, updateCrianca } = useCriancaMutations();
  
  const { control, handleSubmit, formState: { errors }, reset, watch } = useForm<CriancaFormData>({
    resolver: yupResolver(schema) as any,
    defaultValues: initialData || {
      nome: '',
      data_nascimento: '',
      cpf: '',
      responsavel_id: 0,
      criterio_prioridade_id: undefined,
      primeira_opcao_creche_id: undefined,
      segunda_opcao_creche_id: undefined,
      terceira_opcao_creche_id: undefined,
    }
  });

  // Carregar lista de responsáveis
  const { data: responsaveis, isLoading: isLoadingResponsaveis } = useQuery({
    queryKey: ['responsaveis'],
    queryFn: () => apiService.getResponsaveis(),
    staleTime: 1000 * 60 * 5, // 5 minutos
  });

  // Carregar lista de critérios
  const { data: criterios, isLoading: isLoadingCriterios } = useQuery({
    queryKey: ['criterios'],
    queryFn: () => apiService.getCriterios(),
    staleTime: 1000 * 60 * 5, // 5 minutos
  });

  // Carregar lista de creches
  const { data: creches, isLoading: isLoadingCreches } = useQuery({
    queryKey: ['creches'],
    queryFn: () => apiService.getCreches(),
    staleTime: 1000 * 60 * 5, // 5 minutos
  });

  useEffect(() => {
    if (initialData) {
      reset(initialData);
    }
  }, [initialData, reset]);

  const onSubmit = async (data: CriancaFormData) => {
    try {
      // Preparar dados com arquivos
      const formData = new FormData();
      
      // Dados básicos
      formData.append('nome', data.nome);
      formData.append('data_nascimento', data.data_nascimento);
      if (data.cpf) formData.append('cpf', data.cpf);
      formData.append('responsavel_id', data.responsavel_id.toString());
      
      // Critério de prioridade
      if (data.criterio_prioridade_id) {
        formData.append('criterio_prioridade_id', data.criterio_prioridade_id.toString());
      }
      
      // Preferências de creches
      if (data.primeira_opcao_creche_id) {
        formData.append('primeira_opcao_creche_id', data.primeira_opcao_creche_id.toString());
      }
      if (data.segunda_opcao_creche_id) {
        formData.append('segunda_opcao_creche_id', data.segunda_opcao_creche_id.toString());
      }
      if (data.terceira_opcao_creche_id) {
        formData.append('terceira_opcao_creche_id', data.terceira_opcao_creche_id.toString());
      }
      
      // Documentos de matrícula
      documentosMatricula.forEach((file, index) => {
        formData.append(`documentos_matricula[${index}]`, file);
      });
      
      // Documento do critério
      if (documentoCriterio[0]) {
        formData.append('documento_criterio', documentoCriterio[0]);
      }
      
      if (initialData?.id) {
        await updateCrianca.mutateAsync({ id: initialData.id, data: formData });
      } else {
        await createCrianca.mutateAsync(formData);
      }
      
      reset();
      setDocumentosMatricula([]);
      setDocumentoCriterio([]);
      if (onSuccess) onSuccess();
    } catch (error) {
      console.error('Erro ao salvar criança:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-4">
        <Controller
          name="nome"
          control={control}
          render={({ field }) => (
            <Input
              label="Nome Completo"
              placeholder="Digite o nome completo da criança"
              error={errors.nome?.message}
              {...field}
            />
          )}
        />

        <Controller
          name="data_nascimento"
          control={control}
          render={({ field }) => (
            <Input
              type="date"
              label="Data de Nascimento"
              error={errors.data_nascimento?.message}
              {...field}
            />
          )}
        />

        <Controller
          name="cpf"
          control={control}
          render={({ field }) => (
            <Input
              label="CPF (opcional)"
              placeholder="000.000.000-00"
              error={errors.cpf?.message}
              {...field}
            />
          )}
        />

        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <label className="block text-sm font-medium text-gray-700">Responsável</label>
            <button
              type="button"
              className="text-sm text-primary-600 hover:text-primary-700"
              onClick={() => setShowResponsavelForm(!showResponsavelForm)}
            >
              {showResponsavelForm ? 'Selecionar existente' : 'Cadastrar novo'}
            </button>
          </div>

          {!showResponsavelForm ? (
            <Controller
              name="responsavel_id"
              control={control}
              render={({ field }) => (
                <Select
                  label="Responsável"
                  error={errors.responsavel_id?.message}
                  disabled={isLoadingResponsaveis}
                  {...field}
                  onChange={(e) => field.onChange(Number(e.target.value))}
                >
                  <option value="">
                    {isLoadingResponsaveis ? "Carregando..." : "Selecione um responsável"}
                  </option>
                  {responsaveis?.map((resp: Responsavel) => (
                    <option key={resp.id} value={resp.id}>
                      {resp.nome} ({resp.cpf})
                    </option>
                  ))}
                </Select>
              )}
            />
          ) : (
            <div className="space-y-4 p-4 border border-gray-200 rounded-md bg-gray-50">
              <h4 className="text-sm font-medium text-gray-900">Cadastrar Novo Responsável</h4>
              {/* O formulário de responsável será adicionado como um componente separado */}
              <p className="text-sm text-gray-500">
                Formulário de responsável será implementado como um componente separado.
              </p>
            </div>
          )}
        </div>

        {/* Critério de Prioridade */}
        <div className="space-y-4">
          <Controller
            name="criterio_prioridade_id"
            control={control}
            render={({ field }) => (
              <Select
                label="Critério de Prioridade (opcional)"
                error={errors.criterio_prioridade_id?.message}
                disabled={isLoadingCriterios}
                {...field}
                onChange={(e) => {
                  const value = e.target.value;
                  field.onChange(value ? Number(value) : undefined);
                  // Limpar documento do critério se mudou o critério
                  setDocumentoCriterio([]);
                }}
              >
                <option value="">
                  {isLoadingCriterios ? "Carregando..." : "Selecione um critério"}
                </option>
                {criterios?.map((criterio) => (
                  <option key={criterio.id} value={criterio.id}>
                    {criterio.nome}
                  </option>
                ))}
              </Select>
            )}
          />

          {watch('criterio_prioridade_id') && (
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                Documento Comprobatório do Critério
              </label>
              <FileUpload
                files={documentoCriterio}
                onChange={setDocumentoCriterio}
                accept=".pdf,.jpg,.jpeg,.png"
                maxFiles={1}
                maxSize={5} // 5MB
                label="Arraste o documento ou clique para selecionar"
                description="PDF ou imagem até 5MB. Apenas 1 arquivo."
              />
            </div>
          )}
        </div>

        {/* Documentos de Matrícula */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            Documentos de Matrícula
          </label>
          <FileUpload
            files={documentosMatricula}
            onChange={setDocumentosMatricula}
            accept=".pdf,.jpg,.jpeg,.png"
            multiple={true}
            maxFiles={5}
            maxSize={10} // 10MB
            label="Arraste os documentos ou clique para selecionar"
            description="PDF ou imagens até 10MB cada. Máximo 5 arquivos."
          />
        </div>

        {/* Preferências de Creches */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-900">Preferências de Creches</h3>
          <p className="text-sm text-gray-500">
            Selecione 3 creches em ordem de preferência para a matrícula da criança.
          </p>

          <Controller
            name="primeira_opcao_creche_id"
            control={control}
            render={({ field }) => (
              <Select
                label="1ª Opção de Creche"
                error={errors.primeira_opcao_creche_id?.message}
                disabled={isLoadingCreches}
                {...field}
                onChange={(e) => {
                  const value = e.target.value;
                  field.onChange(value ? Number(value) : undefined);
                }}
              >
                <option value="">
                  {isLoadingCreches ? "Carregando..." : "Selecione a primeira opção"}
                </option>
                {creches?.map((creche) => (
                  <option key={creche.id} value={creche.id}>
                    {creche.nome} - {creche.endereco}
                  </option>
                ))}
              </Select>
            )}
          />

          <Controller
            name="segunda_opcao_creche_id"
            control={control}
            render={({ field }) => (
              <Select
                label="2ª Opção de Creche"
                error={errors.segunda_opcao_creche_id?.message}
                disabled={isLoadingCreches}
                {...field}
                onChange={(e) => {
                  const value = e.target.value;
                  field.onChange(value ? Number(value) : undefined);
                }}
              >
                <option value="">
                  {isLoadingCreches ? "Carregando..." : "Selecione a segunda opção"}
                </option>
                {creches?.filter(creche => 
                  creche.id !== watch('primeira_opcao_creche_id') &&
                  creche.id !== watch('terceira_opcao_creche_id')
                ).map((creche) => (
                  <option key={creche.id} value={creche.id}>
                    {creche.nome} - {creche.endereco}
                  </option>
                ))}
              </Select>
            )}
          />

          <Controller
            name="terceira_opcao_creche_id"
            control={control}
            render={({ field }) => (
              <Select
                label="3ª Opção de Creche"
                error={errors.terceira_opcao_creche_id?.message}
                disabled={isLoadingCreches}
                {...field}
                onChange={(e) => {
                  const value = e.target.value;
                  field.onChange(value ? Number(value) : undefined);
                }}
              >
                <option value="">
                  {isLoadingCreches ? "Carregando..." : "Selecione a terceira opção"}
                </option>
                {creches?.filter(creche => 
                  creche.id !== watch('primeira_opcao_creche_id') &&
                  creche.id !== watch('segunda_opcao_creche_id')
                ).map((creche) => (
                  <option key={creche.id} value={creche.id}>
                    {creche.nome} - {creche.endereco}
                  </option>
                ))}
              </Select>
            )}
          />
        </div>
      </div>

      <div className="flex justify-end space-x-3 pt-4">
        <Button 
          type="button" 
          variant="outline" 
          onClick={onCancel}
        >
          Cancelar
        </Button>
        <Button 
          type="submit" 
          variant="primary"
          loading={createCrianca.isPending || updateCrianca.isPending}
        >
          {initialData?.id ? 'Atualizar' : 'Cadastrar'}
        </Button>
      </div>
    </form>
  );
};

export default CriancaForm;
